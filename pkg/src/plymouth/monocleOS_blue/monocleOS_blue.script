# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Set Background Color
Window.SetBackgroundTopColor(0.21568627, 0.55686274, 0.83921568);
Window.SetBackgroundBottomColor(0.21568627, 0.55686274, 0.83921568);

# Tinted text #ffffff
Window.Secolour.red = 1.0;
tinted_text_colour.green = 1.0;
tinted_text_colour.blue = 1.0;

# Greeting
greeting_font = "DejaVu Sans Light 42";
poweroff_text = "Goodbye";

if (Plymouth.GetMode() == "shutdown")
    {
        text_end.image = Image.Text(poweroff_text,255,255,255,1, greeting_font);
        text_end.sprite = Sprite(text_end.image);
        text_end.x = Window.GetX() + Window.GetWidth()  / 2 - text_end.image.GetWidth() / 2;
        text_end.y = Window.GetY() + Window.GetHeight() * 0.75  - text_end.image.GetHeight() / 2;
        text_end.sprite.SetPosition(text_end.x, text_end.y, 2);
    }

# Logo
new_logo.image = Image("logo.png");
new_logo.sprite = Sprite();
new_logo.x = Window.GetWidth() / 2 - new_logo.image.GetWidth()  / 2;
new_logo.y = Window.GetHeight() * 0.25 - new_logo.image.GetHeight() / 2;
new_logo.sprite.SetPosition(new_logo.x, new_logo.y, 10);
new_logo.sprite.SetImage(new_logo.image);

# Loading
for (i = 1; i <= 221; i++)
{
    loading[i].image = Image("loading2_" + i + ".png");
    loading[i].sprite = Sprite(loading[i].image);
    loading[i].sprite.SetOpacity(0);
    loading[i].offset_y = 1;
    loading[i].x = Window.GetX() + Window.GetWidth() / 2 - loading[i].image.GetWidth() / 2;
    loading[i].y = Window.GetX() + Window.GetHeight() * 0.75 - loading[i].image.GetHeight() / 2;
    loading[i].sprite.SetPosition(loading[i].x, loading[i].y, 0);
}

index = 1;
is_forward = 1;
fun boot_callback()
{
    # 50 frames per second
    if (index <= 1)
    {
        is_forward = 1;
    }
    if (index >= 221)
    {
        is_forward = 0;
    }
    for (i = 1; i <= 221; i++)
    {
        if (index != i)
        {
            loading[i].sprite.SetOpacity(0);
        }
        else
        {
            loading[i].sprite.SetOpacity(1);
        }
    }
    if (is_forward)
    {
        index++;
    }
    else
    {
        index--;
    }
}

reboot_opacity = 1.0;
fun reboot_callback()
{
    if (reboot_opacity > 0.2) {
        reboot_opacity -= 0.005;
        logo.sprite.SetOpacity(reboot_opacity);
    }
}

if (Plymouth.GetMode() == "boot")
{
    Plymouth.SetRefreshFunction(boot_callback);
}
else
{
    Plymouth.SetRefreshFunction(reboot_callback);
}

fun quit_callback()
{
    for (i = 1; i <= 221; i++)
    {
        loading[i].sprite.SetOpacity(0);
    }
    logo.sprite.SetOpacity(0);
}

Plymouth.SetQuitFunction(quit_callback);

#----------------------------------------- Dialogue --------------------------------

status = "normal";

fun dialog_setup()
  {
    local.box;
    local.lock;
    local.entry;
    local.instruction;

    box.image = Image("box.png");
    lock.image = Image("lock.png");
    entry.image = Image("entry.png");
    instruction.image = Image("entry_password.png");

    box.sprite = Sprite(box.image);
    box.x = Window.GetX() + Window.GetWidth()  / 2 - box.image.GetWidth ()/2;
    box.y = Window.GetY() + Window.GetHeight() / 2 - box.image.GetHeight()/2;
    box.z = 10000;
    box.sprite.SetPosition(box.x, box.y, box.z);

    lock.sprite = Sprite(lock.image);
    lock.x = box.x + box.image.GetWidth()/2 - (lock.image.GetWidth() + entry.image.GetWidth() + 12) / 2;
    lock.y = box.y + box.image.GetHeight()/2 - lock.image.GetHeight()/2;
    lock.z = box.z + 1;
    lock.sprite.SetPosition(lock.x, lock.y, lock.z);

    entry.sprite = Sprite(entry.image);
    entry.x = lock.x + lock.image.GetWidth() + 6;
    entry.y = box.y + box.image.GetHeight()/2 - entry.image.GetHeight()/2;
    entry.z = box.z + 1;
    entry.sprite.SetPosition(entry.x, entry.y, entry.z);

    instruction.sprite = Sprite(instruction.image);
    instruction.x = lock.x + lock.image.GetWidth() + 6;
    instruction.y = box.y + box.image.GetHeight()/2 - instruction.image.GetHeight()/2;
    instruction.z = box.z + 2;
    instruction.sprite.SetPosition(instruction.x, instruction.y, instruction.z);

    global.dialog.box = box;
    global.dialog.lock = lock;
    global.dialog.entry = entry;
    global.dialog.instruction = instruction;
    global.dialog.bullet_image = Image("bullet.png");
    dialog_opacity (1);
  }

fun dialog_opacity(opacity)
  {
    dialog.box.sprite.SetOpacity (opacity);
    dialog.lock.sprite.SetOpacity (opacity);
    dialog.entry.sprite.SetOpacity (opacity);
    dialog.instruction.sprite.SetOpacity (opacity);
    for (index = 0; dialog.bullet[index]; index++)
      {
        dialog.bullet[index].sprite.SetOpacity(opacity);
      }
  }

fun display_normal_callback ()
  {
    global.status = "normal";
    if (global.dialog)
      dialog_opacity (0);
  }

fun display_password_callback (prompt, bullets)
  {
    max_bullets = dialog.entry.image.GetWidth() / dialog.bullet_image.GetWidth();
    global.status = "password";
    if (!global.dialog)
	dialog_setup();
    else
	dialog_opacity(1);
    for (index = 0; dialog.bullet[index] || index < bullets; index++)
      {
        if (!dialog.bullet[index] && index < max_bullets)
          {
            dialog.bullet[index].sprite = Sprite(dialog.bullet_image);
            dialog.bullet[index].x = dialog.entry.x + index * dialog.bullet_image.GetWidth();
            dialog.bullet[index].y = dialog.entry.y + dialog.entry.image.GetHeight() / 2 - dialog.bullet_image.GetHeight() / 2;
            dialog.bullet[index].z = dialog.entry.z + 1;
            dialog.bullet[index].sprite.SetPosition(dialog.bullet[index].x, dialog.bullet[index].y, dialog.bullet[index].z);
          }
        if (index < bullets)
          dialog.bullet[index].sprite.SetOpacity(1);
        else
          dialog.bullet[index].sprite.SetOpacity(0);
        if (bullets > 0)
          dialog.instruction.sprite.SetOpacity(0);
	else
	  dialog.instruction.sprite.SetOpacity(1);
      }
  }

Plymouth.SetDisplayNormalFunction(display_normal_callback);
Plymouth.SetDisplayPasswordFunction(display_password_callback);


#----------------------------------------- Message --------------------------------

message_sprite = Sprite();
message_sprite.SetPosition(Window.GetX() + 10, Window.GetY() + 10, 10000);

fun message_callback (text)
{
  my_image = Image.Text(text, 1, 1, 1);
  message_sprite.SetImage(my_image);
}

Plymouth.SetMessageFunction(message_callback);
